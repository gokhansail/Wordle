public class CustomInteractorStyle : vtkInteractorStyleRubberBandPick
{
    private readonly vtkRenderWindowInteractor interactor;
    private readonly vtkRenderer renderer;
    private readonly Selector selector;
    private readonly vtkUnstructuredGrid grid;
    private readonly Dictionary<int, vtkActor> elementActors;

    public CustomInteractorStyle(vtkRenderWindowInteractor interactor, vtkRenderer renderer, vtkUnstructuredGrid grid, Selector selector, Dictionary<int, vtkActor> elementActors)
    {
        this.interactor = interactor;
        this.renderer = renderer;
        this.grid = grid;
        this.selector = selector;
        this.elementActors = elementActors;

        SetCurrentRenderer(renderer);
    }

    public override void OnLeftButtonUp()
    {
        base.OnLeftButtonUp();

        if (selector.Mode != SelectionMode.Box)
            return;

        // Alan seçimi yap
        vtkRenderedAreaPicker areaPicker = vtkRenderedAreaPicker.New();
        areaPicker.Pick(0, 0, 0, 0, renderer); // Mouse koordinatları gerçek kodda alınacak

        vtkExtractSelectedFrustum frustumFilter = vtkExtractSelectedFrustum.New();
        frustumFilter.SetInput(grid);
        frustumFilter.SetFrustum(areaPicker.GetFrustum());
        frustumFilter.PreserveTopologyOn();
        frustumFilter.Update();

        vtkUnstructuredGrid selected = frustumFilter.GetOutput();

        // Tüm actor'ları resetle (orijinal renk)
        foreach (var kvp in elementActors)
            kvp.Value.GetProperty().SetColor(0.85, 0.65, 0.5);

        // Seçilen hücreleri renklendir
        for (int i = 0; i < selected.GetNumberOfCells(); i++)
        {
            int globalCellId = selected.GetCellData().GetGlobalIds().GetValue(i);
            if (elementActors.ContainsKey(globalCellId))
                elementActors[globalCellId].GetProperty().SetColor(0.2, 0.9, 0.2); // Yeşil
        }

        interactor.Render();
    }
}
