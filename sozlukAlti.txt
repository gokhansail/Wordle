private void RenderWindowControl_MouseUp(object sender, MouseEventArgs e)
{
    if (e.Button != MouseButtons.Left || selector.Mode != SelectionMode.Box || selector.Target != SelectionTarget.Element)
        return;

    int endX = e.X;
    int endY = e.Y;

    var picker = vtkRenderedAreaPicker.New();
    picker.AreaPick(startX, startY, endX, endY, renderer);

    var frustumFilter = vtkExtractSelectedFrustum.New();
    frustumFilter.SetInput(grid);
    frustumFilter.SetFrustum(picker.GetFrustum());
    frustumFilter.PreserveTopologyOn();
    frustumFilter.Update();

    var selected = vtkUnstructuredGrid.SafeDownCast(frustumFilter.GetOutput());

    var highlightArray = vtkIntArray.New();
    highlightArray.SetName("Highlight");
    highlightArray.SetNumberOfComponents(1);
    highlightArray.SetNumberOfTuples(grid.GetNumberOfCells());

    for (int i = 0; i < grid.GetNumberOfCells(); i++)
        highlightArray.SetValue(i, 0);

    var globalIds = selected.GetCellData().GetGlobalIds();
    if (globalIds != null)
    {
        for (int i = 0; i < selected.GetNumberOfCells(); i++)
        {
            int globalId = (int)globalIds.GetComponent(i, 0);
            highlightArray.SetValue(globalId, 1);
        }
    }

    grid.GetCellData().AddArray(highlightArray);
    grid.GetCellData().SetScalars(highlightArray);

    mapper.SetScalarRange(0, 1);
    mapper.SetScalarModeToUseCellData();
    mapper.ScalarVisibilityOn();

    renderWindowControl.RenderWindow.Render();
}
