using System;
using System.Collections.Generic;
using System.IO;
using System.Windows.Forms;

public class ModelVisualizer
{
    // VTK nesneleri
    private vtkRenderer renderer;
    private vtkRenderWindow renderWindow;
    private vtkRenderWindowInteractor interactor;
    private vtkUnstructuredGrid grid;
    private vtkActor modelActor;

    // Eleman tiplerine göre sabitler (VTK hücre tipleri)
    private const int VTK_TETRA = 10;
    private const int VTK_HEXAHEDRON = 12;
    private const int VTK_WEDGE = 13;
    private const int VTK_PYRAMID = 14;

    // Model verilerini tutacak yapılar
    private Dictionary<int, double[]> nodes = new Dictionary<int, double[]>();
    private List<ElementData> elements = new List<ElementData>();

    // Model için renk ayarları
    private double[] modelColor = new double[] { 0.8, 0.8, 0.9 }; // Açık mavi

    /// <summary>
    /// Eleman verilerini tutacak yardımcı sınıf
    /// </summary>
    private class ElementData
    {
        public int Id { get; set; }
        public int Type { get; set; }
        public List<int> NodeIds { get; set; }

        public ElementData(int id, int type)
        {
            Id = id;
            Type = type;
            NodeIds = new List<int>();
        }
    }

    /// <summary>
    /// Node ve Element verilerini okuyup 3D modeli oluşturan ve görselleştiren ana metot
    /// </summary>
    /// <param name="nodesFilePath">Nodes dosyasının yolu</param>
    /// <param name="elementsFilePath">Elements dosyasının yolu</param>
    /// <param name="windowControl">Render penceresinin ekleneceği kontrol</param>
    public void VisualizeModel(string nodesFilePath, string elementsFilePath, Control windowControl)
    {
        try
        {
            // Node ve Element verilerini oku
            ReadNodeData(nodesFilePath);
            ReadElementData(elementsFilePath);

            // VTK grid ve görselleştirme oluştur
            CreateVTKGrid();
            SetupRenderer(windowControl);

            // Görselleştirme işlemini başlat
            renderWindow.Render();
        }
        catch (Exception ex)
        {
            MessageBox.Show("Model görselleştirme hatası: " + ex.Message, "Hata", 
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }

    /// <summary>
    /// Nodes dosyasından veri okuma işlemi
    /// </summary>
    /// <param name="filePath">Nodes dosyasının yolu</param>
    private void ReadNodeData(string filePath)
    {
        nodes.Clear();
        
        using (StreamReader reader = new StreamReader(filePath))
        {
            string line;
            while ((line = reader.ReadLine()) != null)
            {
                if (string.IsNullOrWhiteSpace(line)) continue;
                
                string[] parts = line.Trim().Split(new char[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                
                if (parts.Length >= 4) // Id, X, Y, Z değerleri
                {
                    int nodeId = int.Parse(parts[0]);
                    double x = double.Parse(parts[1]);
                    double y = double.Parse(parts[2]);
                    double z = double.Parse(parts[3]);
                    
                    nodes.Add(nodeId, new double[] { x, y, z });
                }
            }
        }
        
        Console.WriteLine($"{nodes.Count} node okundu.");
    }

    /// <summary>
    /// Elements dosyasından veri okuma işlemi
    /// </summary>
    /// <param name="filePath">Elements dosyasının yolu</param>
    private void ReadElementData(string filePath)
    {
        elements.Clear();
        
        using (StreamReader reader = new StreamReader(filePath))
        {
            string line;
            while ((line = reader.ReadLine()) != null)
            {
                if (string.IsNullOrWhiteSpace(line)) continue;
                
                string[] parts = line.Trim().Split(new char[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
                
                if (parts.Length >= 3) // En az Id, Tip ve bir node ID'si olmalı
                {
                    int elementId = int.Parse(parts[0]);
                    int elementType = int.Parse(parts[1]);
                    
                    ElementData element = new ElementData(elementId, elementType);
                    
                    // Node ID'lerini ekle (2. indeksten sonraki tüm değerler)
                    for (int i = 2; i < parts.Length; i++)
                    {
                        element.NodeIds.Add(int.Parse(parts[i]));
                    }
                    
                    elements.Add(element);
                }
            }
        }
        
        Console.WriteLine($"{elements.Count} element okundu.");
    }

    /// <summary>
    /// VTK Grid oluşturma işlemi
    /// </summary>
    private void CreateVTKGrid()
    {
        // Yeni bir unstructured grid oluştur
        grid = new vtkUnstructuredGrid();
        
        // Points nesnesi oluştur
        vtkPoints points = new vtkPoints();
        points.SetDataTypeToDouble();
        
        // Node ID'lerini tutacak array
        vtkIntArray nodeIds = new vtkIntArray();
        nodeIds.SetName("NodeIds");
        
        // Düğümleri points nesnesine ekle
        foreach (var node in nodes)
        {
            int nodeId = node.Key;
            double[] coords = node.Value;
            
            // Points'e ekle ve index al
            int index = points.InsertNextPoint(coords[0], coords[1], coords[2]);
            
            // ID'yi array'e ekle
            nodeIds.InsertNextValue(nodeId);
        }
        
        // Points'i grid'e ekle
        grid.SetPoints(points);
        
        // Node ID'lerini point data olarak ekle
        grid.GetPointData().AddArray(nodeIds);
        
        // Element ID'lerini tutacak array
        vtkIntArray elementIds = new vtkIntArray();
        elementIds.SetName("ElementIds");
        
        // Elemanları hücre olarak ekle
        foreach (var element in elements)
        {
            // Elemana ait node ID'lerini VTK cell oluşturmak için dönüştür
            int[] nodeIndices = GetNodeIndices(element.NodeIds);
            
            // Eleman tipine göre hücre ekleme
            int cellId = -1;
            
            switch (ConvertToVTKCellType(element.Type))
            {
                case VTK_TETRA:
                    cellId = AddTetraCell(nodeIndices);
                    break;
                case VTK_HEXAHEDRON:
                    cellId = AddHexahedronCell(nodeIndices);
                    break;
                case VTK_WEDGE:
                    cellId = AddWedgeCell(nodeIndices);
                    break;
                case VTK_PYRAMID:
                    cellId = AddPyramidCell(nodeIndices);
                    break;
                default:
                    // Desteklenmeyen tip için hücre ekleme atlanır
                    continue;
            }
            
            // Hücre ID'yi array'e ekle
            if (cellId >= 0)
            {
                elementIds.InsertNextValue(element.Id);
            }
        }
        
        // Element ID'lerini cell data olarak ekle
        grid.GetCellData().AddArray(elementIds);
    }

    /// <summary>
    /// Element tipini VTK hücre tipine dönüştürür
    /// </summary>
    private int ConvertToVTKCellType(int elementType)
    {
        // Burada kendi eleman tiplerinizi VTK tiplerine dönüştürün
        // Örnek bir dönüşüm:
        switch (elementType)
        {
            case 1: return VTK_TETRA;      // Tetrahedron
            case 2: return VTK_HEXAHEDRON; // Hexahedron (küp)
            case 3: return VTK_WEDGE;      // Kama (Wedge/Prism)
            case 4: return VTK_PYRAMID;    // Piramit
            default: return -1;            // Desteklenmeyen tip
        }
    }

    /// <summary>
    /// Node ID'lerini points indekslerine dönüştürür
    /// </summary>
    private int[] GetNodeIndices(List<int> nodeIds)
    {
        int[] indices = new int[nodeIds.Count];
        
        // Her bir node ID için points array'indeki indeksi bul
        for (int i = 0; i < nodeIds.Count; i++)
        {
            // Basit bir yaklaşım: Element dosyasındaki node sırası, points'teki sıra ile aynı kabul edilir
            // Gerçek uygulamada dictionary ile ID-indeks eşlemesi yapmak daha doğru olabilir
            int nodeId = nodeIds[i];
            int index = 0;
            
            // Nodelar sıralı eklenmediyse, ID'ye göre indeks bul
            foreach (var node in nodes)
            {
                if (node.Key == nodeId)
                    break;
                index++;
            }
            
            indices[i] = index;
        }
        
        return indices;
    }

    /// <summary>
    /// Tetrahedron hücresi ekler
    /// </summary>
    private int AddTetraCell(int[] nodeIndices)
    {
        if (nodeIndices.Length < 4) return -1;
        
        vtkTetra tetra = new vtkTetra();
        for (int i = 0; i < 4; i++)
        {
            tetra.GetPointIds().SetId(i, nodeIndices[i]);
        }
        
        return grid.InsertNextCell(tetra.GetCellType(), tetra.GetPointIds());
    }

    /// <summary>
    /// Hexahedron (küp) hücresi ekler
    /// </summary>
    private int AddHexahedronCell(int[] nodeIndices)
    {
        if (nodeIndices.Length < 8) return -1;
        
        vtkHexahedron hexahedron = new vtkHexahedron();
        for (int i = 0; i < 8; i++)
        {
            hexahedron.GetPointIds().SetId(i, nodeIndices[i]);
        }
        
        return grid.InsertNextCell(hexahedron.GetCellType(), hexahedron.GetPointIds());
    }

    /// <summary>
    /// Wedge (kama/prism) hücresi ekler
    /// </summary>
    private int AddWedgeCell(int[] nodeIndices)
    {
        if (nodeIndices.Length < 6) return -1;
        
        vtkWedge wedge = new vtkWedge();
        for (int i = 0; i < 6; i++)
        {
            wedge.GetPointIds().SetId(i, nodeIndices[i]);
        }
        
        return grid.InsertNextCell(wedge.GetCellType(), wedge.GetPointIds());
    }

    /// <summary>
    /// Pyramid hücresi ekler
    /// </summary>
    private int AddPyramidCell(int[] nodeIndices)
    {
        if (nodeIndices.Length < 5) return -1;
        
        vtkPyramid pyramid = new vtkPyramid();
        for (int i = 0; i < 5; i++)
        {
            pyramid.GetPointIds().SetId(i, nodeIndices[i]);
        }
        
        return grid.InsertNextCell(pyramid.GetCellType(), pyramid.GetPointIds());
    }

    /// <summary>
    /// Renderer ve görselleştirme ayarlarını yapılandırır
    /// </summary>
    private void SetupRenderer(Control windowControl)
    {
        // Renderer oluştur
        renderer = new vtkRenderer();
        renderer.SetBackground(0.1, 0.2, 0.3); // Koyu mavi arka plan
        
        // RenderWindow oluştur ve renderer'ı ekle
        renderWindow = new vtkRenderWindow();
        renderWindow.AddRenderer(renderer);
        
        // Windows Forms kontrolüne bağla
        renderWindow.SetParentId(windowControl.Handle);
        renderWindow.SetSize(windowControl.Width, windowControl.Height);
        
        // Interactor oluştur
        interactor = new vtkRenderWindowInteractor();
        interactor.SetRenderWindow(renderWindow);
        
        // Interactor stil ayarla
        vtkInteractorStyleTrackballCamera style = new vtkInteractorStyleTrackballCamera();
        interactor.SetInteractorStyle(style);
        
        // Geometri filtreleme - bu, iç hücrelerin de görünmesini sağlar
        vtkGeometryFilter geometryFilter = new vtkGeometryFilter();
        geometryFilter.SetInputData(grid);
        geometryFilter.Update();
        
        // Mapper oluştur - DataSetMapper yerine PolyDataMapper kullanılıyor
        vtkPolyDataMapper mapper = new vtkPolyDataMapper();
        mapper.SetInputData(geometryFilter.GetOutput());
        mapper.SetScalarModeToUseCellData();
        mapper.ScalarVisibilityOn();
        
        // İç hücrelerin görünür olması için lut (lookup table) tanımla
        vtkLookupTable lut = new vtkLookupTable();
        lut.SetNumberOfTableValues(1);
        lut.SetTableValue(0, modelColor[0], modelColor[1], modelColor[2], 1.0);
        lut.Build();
        
        mapper.SetLookupTable(lut);
        mapper.SetScalarRange(0, 0);
        
        // Actor oluştur
        modelActor = new vtkActor();
        modelActor.SetMapper(mapper);
        
        // İç kısımların görünmesi için opaklık ayarı
        vtkProperty property = modelActor.GetProperty();
        property.SetOpacity(0.9); // Hafif şeffaflık
        
        // İç kısımları göstermek için önemli ayarlar
        property.SetBackfaceCulling(0); // Arka yüzleri göster
        property.SetFrontfaceCulling(0); // Ön yüzleri göster
        
        // Kenarları gösterme opsiyonu
        property.SetEdgeVisibility(1);
        property.SetEdgeColor(0.0, 0.0, 0.0); // Siyah kenarlar
        property.SetLineWidth(1.0);
        
        // Aydınlatma ayarları - iç kısımların daha iyi görünmesi için
        property.SetAmbient(0.3);
        property.SetDiffuse(0.7);
        property.SetSpecular(0.2);
        property.SetSpecularPower(10);
        
        // Actor'ü renderer'a ekle
        renderer.AddActor(modelActor);
        
        // Kamera ayarlarını yap
        renderer.ResetCamera();
        
        // Interactor'ü başlat
        interactor.Initialize();
    }

    /// <summary>
    /// Modelde seçim yapmak için gerekli event handler'ları ekler
    /// </summary>
    public void SetupSelectionHandlers()
    {
        // Bu metodu daha sonra selection işlevselliği için dolduracağız
    }

    /// <summary>
    /// Grid ve Renderer'a erişmek için property'ler
    /// </summary>
    public vtkUnstructuredGrid Grid => grid;
    public vtkRenderer Renderer => renderer;
    public vtkRenderWindowInteractor Interactor => interactor;
    public vtkActor ModelActor => modelActor;
}


using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

[DefaultEvent("CheckedChanged")]
public class CustomCheckBox : CheckBox
{
    private Color hoverBackColor = Color.LightGray;
    private Color hoverForeColor = Color.DarkGray;
    private int cornerRadius = 10;
    private Color borderColor = Color.Black;
    private int borderSize = 1;

    public CustomCheckBox()
    {
        FlatStyle = FlatStyle.Flat;
        this.FlatAppearance.BorderSize = 0;
    }

    [Category("Appearance")]
    [Description("Arka planın hover rengi.")]
    public Color HoverBackColor
    {
        get => hoverBackColor;
        set { hoverBackColor = value; Invalidate(); }
    }

    [Category("Appearance")]
    [Description("Yazı renginin hover durumu.")]
    public Color HoverForeColor
    {
        get => hoverForeColor;
        set { hoverForeColor = value; Invalidate(); }
    }

    [Category("Appearance")]
    [Description("Köşe yarıçapı. Daha yüksek değerler daha yuvarlak köşeler oluşturur.")]
    public int CornerRadius
    {
        get => cornerRadius;
        set { cornerRadius = value; Invalidate(); }
    }

    [Category("Appearance")]
    [Description("Kenarlık rengi.")]
    public Color BorderColor
    {
        get => borderColor;
        set { borderColor = value; Invalidate(); }
    }

    [Category("Appearance")]
    [Description("Kenarlık kalınlığı.")]
    public int BorderSize
    {
        get => borderSize;
        set { borderSize = value; Invalidate(); }
    }

    protected override void OnPaint(PaintEventArgs pevent)
    {
        base.OnPaint(pevent);
        pevent.Graphics.SmoothingMode = SmoothingMode.AntiAlias;

        // Draw background
        using (var backgroundBrush = new SolidBrush(Enabled ? BackColor : SystemColors.Control))
        {
            pevent.Graphics.FillRectangle(backgroundBrush, ClientRectangle);
        }

        // Draw border
        using (var borderPen = new Pen(borderColor, borderSize))
        {
            pevent.Graphics.DrawRectangle(borderPen, 0, 0, Width - 1, Height - 1);
        }

        // Draw custom text
        TextRenderer.DrawText(pevent.Graphics, Text, Font, ClientRectangle, Enabled ? ForeColor : SystemColors.GrayText, TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter);
    }

    protected override void OnMouseEnter(EventArgs eventArgs)
    {
        base.OnMouseEnter(eventArgs);
        BackColor = hoverBackColor;
        ForeColor = hoverForeColor;
    }

    protected override void OnMouseLeave(EventArgs eventArgs)
    {
        base.OnMouseLeave(eventArgs);
        BackColor = SystemColors.Control;
        ForeColor = SystemColors.ControlText;
    }
}
