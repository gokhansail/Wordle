using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

[DefaultEvent("CheckedChanged")]
public class CustomCheckBox : CheckBox
{
    private Color hoverBackColor = Color.LightGray;
    private Color hoverForeColor = Color.DarkGray;
    private int cornerRadius = 10;
    private Color borderColor = Color.Black;
    private int borderSize = 1;

    public CustomCheckBox()
    {
        FlatStyle = FlatStyle.Flat;
        this.FlatAppearance.BorderSize = 0;
    }

    [Category("Appearance")]
    [Description("Arka planın hover rengi.")]
    public Color HoverBackColor
    {
        get => hoverBackColor;
        set { hoverBackColor = value; Invalidate(); }
    }

    [Category("Appearance")]
    [Description("Yazı renginin hover durumu.")]
    public Color HoverForeColor
    {
        get => hoverForeColor;
        set { hoverForeColor = value; Invalidate(); }
    }

    [Category("Appearance")]
    [Description("Köşe yarıçapı. Daha yüksek değerler daha yuvarlak köşeler oluşturur.")]
    public int CornerRadius
    {
        get => cornerRadius;
        set { cornerRadius = value; Invalidate(); }
    }

    [Category("Appearance")]
    [Description("Kenarlık rengi.")]
    public Color BorderColor
    {
        get => borderColor;
        set { borderColor = value; Invalidate(); }
    }

    [Category("Appearance")]
    [Description("Kenarlık kalınlığı.")]
    public int BorderSize
    {
        get => borderSize;
        set { borderSize = value; Invalidate(); }
    }

    protected override void OnPaint(PaintEventArgs pevent)
    {
        base.OnPaint(pevent);
        pevent.Graphics.SmoothingMode = SmoothingMode.AntiAlias;

        // Draw background
        using (var backgroundBrush = new SolidBrush(Enabled ? BackColor : SystemColors.Control))
        {
            pevent.Graphics.FillRectangle(backgroundBrush, ClientRectangle);
        }

        // Draw border
        using (var borderPen = new Pen(borderColor, borderSize))
        {
            pevent.Graphics.DrawRectangle(borderPen, 0, 0, Width - 1, Height - 1);
        }

        // Draw custom text
        TextRenderer.DrawText(pevent.Graphics, Text, Font, ClientRectangle, Enabled ? ForeColor : SystemColors.GrayText, TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter);
    }

    protected override void OnMouseEnter(EventArgs eventArgs)
    {
        base.OnMouseEnter(eventArgs);
        BackColor = hoverBackColor;
        ForeColor = hoverForeColor;
    }

    protected override void OnMouseLeave(EventArgs eventArgs)
    {
        base.OnMouseLeave(eventArgs);
        BackColor = SystemColors.Control;
        ForeColor = SystemColors.ControlText;
    }
}
