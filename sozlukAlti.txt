public override void OnLeftButtonUp()
{
    int endX = this.GetInteractor().GetEventPosition()[0];
    int endY = this.GetInteractor().GetEventPosition()[1];

    if (selector.Mode != SelectionMode.Box || selector.Target != SelectionTarget.Element)
        return;

    vtkRenderedAreaPicker picker = vtkRenderedAreaPicker.New();
    picker.AreaPick(startX, startY, endX, endY, renderer);

    vtkExtractSelectedFrustum frustumFilter = vtkExtractSelectedFrustum.New();
    frustumFilter.SetInput(grid);
    frustumFilter.SetFrustum(picker.GetFrustum());
    frustumFilter.PreserveTopologyOn();
    frustumFilter.Update();

    vtkUnstructuredGrid selected = vtkUnstructuredGrid.SafeDownCast(frustumFilter.GetOutput());

    int cellCount = grid.GetNumberOfCells();
    vtkIntArray highlightArray = vtkIntArray.New();
    highlightArray.SetName("Highlight");
    highlightArray.SetNumberOfComponents(1);
    highlightArray.SetNumberOfTuples(cellCount);

    // Tüm hücreleri sıfırla
    for (int i = 0; i < cellCount; i++)
        highlightArray.SetValue(i, 0);

    // Seçilen hücreleri işaretle (1 yap)
    vtkDataArray globalIds = selected.GetCellData().GetGlobalIds();
    if (globalIds != null)
    {
        for (int i = 0; i < selected.GetNumberOfCells(); i++)
        {
            int globalId = (int)globalIds.GetComponent(i, 0);
            highlightArray.SetValue(globalId, 1);
        }
    }

    // Scalar array'i grid'e ata ve aktif yap
    grid.GetCellData().AddArray(highlightArray);
    grid.GetCellData().SetScalars(highlightArray);

    // Mapper'da scalar görünürlüğü aktif olmalı (mapper dışarıdan geliyor)
    mapper.SetScalarRange(0, 1);
    mapper.SetScalarModeToUseCellData();
    mapper.ScalarVisibilityOn();

    this.GetInteractor().Render();
}
